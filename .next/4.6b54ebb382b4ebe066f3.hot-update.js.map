{"version":3,"file":"4.6b54ebb382b4ebe066f3.hot-update.js","sources":["webpack:///pages/index.js"],"sourcesContent":["import React from 'react';\nimport {Col, label, Button, ListGroup, Navbar, Nav, NavItem} from 'react-bootstrap';\n\nimport { default as Web3} from 'web3';\nimport contractArtifact from '../build/contracts/IcoDDBB.json'\nimport contractERC20 from '../build/contracts/createERC20_v2.json'\nimport { default as contract } from 'truffle-contract'\n\n// REACT COMPONENTS\nimport Formu from '../components/Formu'\nimport IcoList from '../components/IcoList'\n\n\n\n// TODO ESTO SOBRA PORQUE USAMOS LA EXTENSION METAMASK\nvar web3;\nif (typeof web3 !== 'undefined') {\n\tweb3 = new Web3(web3.currentProvider);\n} else {\n\t//  Especificamos el provider \n\t// empleando chrome con MetaMask el provider es injectado automaticamente\n\tweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:7545\"))\n} \n\nvar account = web3.eth.accounts[0];\n\nvar arrayERC20 = new Array(); // guarda los contratos de los tokens creados\n\nexport default class App extends React.Component {\n\n\t/* \n\t* Constructor que define el estado del componente\n\t*/\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = ({\n\t\t\tcontrato: null,\n\t\t\tlastICO: null,\n\t\t\tevent_Register: null,\n\t\t\t/*event_CreateToken: null, */\n\t\t\tevent_Transfer: null, \n\t\t\tid_Array: null,\n\t\t});\n\t\tthis.formCliked = this.formCliked.bind(this);\n\t\tthis.registerNewICO = this.registerNewICO.bind(this);\n\t\tthis.deployNewERC20 = this.deployNewERC20.bind(this);\n\t\tthis.updateList = this.updateList.bind(this);\n\t\tthis.executeTransfer = this.executeTransfer.bind(this);\n\t}\n\n\t/*\n\t* Métdo invocado 1 vez antes de que el render inicial ocurra \n\t*/ \n\tasync componentWillMount() {\n\n\t\tvar theContract = contract(contractArtifact);\n\n\t\ttheContract.setProvider(web3.currentProvider);\n\n\t\t// CONTRATO\t\t\n\t\tvar contrato = await theContract.deployed(); // ESTO YA ME GUARDA EL CONTRATO\n\t\t//console.log(\"Contrato =\", contrato);\n\n\t\t// EVENTO \n\t\tvar eventReg = contrato.Register();\n\t\t/* Event Params: Register(uint id, string name, string opppening, string clossing, address icoOwner) */\n\t\t//console.log(event);\n\n\t\t// LANZAMOS WATCH\n\t\teventReg.watch((err, event) => {\n\t\t\t//console.log(event);\n\t\t\tif (err){\n\t\t\t\tconsole.log(err);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"This is the event!\");\n\t\t\t\t//console.log(event);\n\t\t\t\tconsole.log(\"ICO was created/registered by: \" + event.args.icoOwner);\n\n\t\t\t\tvar icoId = event.args.id;\n\n\t\t\t\tconsole.log(\"The last ICO was given the following ID: \" + icoId);\n\n\t\t\t\tvar last = new Object();\n\t\t\t\tlast.id = event.args.id;\n\t\t\t\tlast.name = event.args.name;\n\t\t\t\tlast.opppeningDate = event.args.opppening;\n\t\t\t\tlast.clossingDate = event.args.clossing;\n\t\t\t\tlast.owner = event.args.icoOwner;\n\n\t\t\t\t//console.log(last.valueOf());\n\n\n\t            this.setState({\n\t\t\t\t\tlastICO: last.valueOf(),\n\t\t\t\t});\t\n\t\t\t\tthis.updateList();\n\t\t\t}\n\t\t});\n\t\tconsole.log(\"eventReg watch has been started\");\n\n\t\tthis.setState({\n\t\t\tcontrato: contrato,\n\t\t\tevent_Register: eventReg,\t\t\t\n\t\t});\n\t\tthis.updateList();\n\n\t}\n\n\n\t/*\n\t* Metodo que recibe props del componente Form con la info introducida\n\t*/\n\tasync formCliked (formInfo) {\n\n\t\tconsole.log(\"formInfo recieved\");\n\t\t//console.log(formInfo);\n\n\t\t// Desplegar ERC20 de la new ICO\n\t\tvar tokenAddr =  await this.deployNewERC20(formInfo);\n\t\tconsole.log(\"TRAZA 2: \" + tokenAddr);\t\n\n\t\t// Guardar nueva ICO en Smart Contract IcoDDBB.sol\n\t\tthis.registerNewICO(formInfo, tokenAddr);\t\t\n\n\t\t// Actualizar listado de ICos\n\t\tthis.updateList();\n\n\t}\n\n\t/*\n\t* Se conecta con la blockchain para interactuar con el smart contract IcoDDBB.sol\n\t*/\n\tregisterNewICO(info, tokenAdd) {\n\t\tconsole.log(\">>>>REGISTER<<<<<<\");\n\t\t//console.log(info);\n\t\t\n\t\tvar add = tokenAdd;\n\t\tconsole.log(\"AAAAAQUIIIIIIIII\");\n\t\tconsole.log(add);\n\n\t\t//register(string name, string opppening, string clossing)\n\t\t//register(string name, address token,  string opppening, string clossing)\n\t\tthis.state.contrato.register(info.icoName, add, info.OpeningDate, info.ClossingDate, {from: account, gas:2000000})\n\t\t.then(res => {\n\t\t\tconsole.log(\">>>>>>>>>>>> +1 succes\");\n\t\t})\n        .catch(err => {\n\t\t\tconsole.log(\"ERROR\", err);\n        });\n\n\t}\n\n\t/*\n\t* Método que despliega sobre la Blockhain el nuevo ERC20 creado\n\t*/\n\tasync deployNewERC20(info) {\n\t\tconsole.log(\">>>>DEPLOY ERC20<<<<<<\");\n\t\t//console.log(info);\n\t\t\n\t\tvar theERC20 = contract(contractERC20);\n\n\t\ttheERC20.setProvider(web3.currentProvider);\n\t\t\n\n\t\t// CONTRATO\t\n\t\t// New instance of the Smart Contract -> NUEW TOKEN\n\t\tvar tokenInstance = await theERC20.new({from: account, gas:2000000}).then(function(instanciaERC20){\n\t\t\t// print addr of the new token \n\t\t\tconsole.log(\">>>>>>>>> NEW TOKEN <<<<<<<<<<<\");\n\t\t\tconsole.log(instanciaERC20.address);\n\t\t\treturn (instanciaERC20);\n\t\t});\n\t\t//console.log(\"Contrato: \" + tokenInstance);\t\t\n\n\t\ttokenInstance.setERC2Params(info.tokenName, info.symbol, info.tokenDecimals, info.tokenTotalSupply, info.tokenPrice, account,\n\t\t\t{from: account, gas:200000}).then((res, err) => {\n\t\t\t\tif(!err){\n\t\t\t\t\tconsole.log(\">>>>> PARAMs SET <<<<<<\");\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t});\n\n\t\t// Actualizamos array\n\t\tarrayERC20.push(tokenInstance); //arrayERC20.push(contrato);\n\t\t//console.log(\"array lenght\" + arrayERC20.length);\n\n\t\t\n\t\t//var tok = await tokenInstance.tokenName();\n\t\tconsole.log(\"TOKEN NAME \" + await tokenInstance.tokenName());\n\t\t\n\n\t\t// EVENTO\n\t\t// event Transfer(address indexed from, address indexed to, uint256 value)\n\t\tvar eventTransfer = tokenInstance.Transfer();//contrato.Transfer();\n\t\t//console.log(eventTransfer);\n\n\t\t// LANZAMOS WATCH\n\t\teventTransfer.watch((err, event) => {\n\t\t\t//console.log(event);\n\t\t\tif (err){\n\t\t\t\tconsole.log(err);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"This is the Transfer event!\");\n\t\t\t\t//console.log(event);\n\t\t\t\tconsole.log(\">>>>> TANSFER MADE <<<<<\");\n\t\t\t\tconsole.log(\"Anamount of \" + event.args.value + \" tokens have been transfered to \" + event.args.to);\n\t\t\t\tupdateList();\n\t\t\t}\n\t\t});\n\t\tconsole.log(\"eventTransfer watch has been started\");\n\n\t\tthis.setState({\n\t\t\tevent_Transfer: eventTransfer,\t\t\t\n\t\t});\n\n\t\t// RETURN THE ADDRESS OF THE CONTRACT CREATED ABOVE\n\t\tconsole.log(\"TRAZA 1: \" + tokenInstance.address);\n\t\treturn tokenInstance.address;\n\t}\n\n\n\t/*\n\t* Metodo que pide a la Blockchain el array de id's de las ICOs\n\t*/\n\tasync updateList(){\n\t\tconsole.log(\"UPDATE ICO LIST \");\n\t\tvar idArray = [] \n\t\tidArray = await this.state.contrato.getIdIcos.call();\n\t\t//console.log(\"ARRAY\");\n\t\t//console.log(idArray);\n\n\t\tthis.setState({ id_Array: idArray});\n\n\t}\n\n\n\t/*\n\t*\n\t*/\n\texecuteTransfer(contract){\n\n\t\t//console.log(\"TRAZA 4\");\n\t\t//console.log(contract);\n\t\tcontract.transfer(account, 100, {from: account, gas:200000});\n\n\t}\n\n\t/*\n\t* Invocado inmediatamente antes de que un componente se desmonte del DOM\n\t*/\n\tcomponentWillUnmount(){\n\t\t// TEAR DOWN WATCH\n\t\tthis.state.event_Register.stopWatching();\n\t\t//this.state.event_CreateToken.stopWatching();\n\t\tthis.state.event_Transfer.stopWatching();\n\t\tconsole.log(\"watch's have been tore down\");\n\t}\n\n\n\t/*\n\t* Metodo render que renderiza la vista ppal\n\t*/\n\trender() {\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossOrigin=\"anonymous\" />\n\t\t\t\t<Navbar inverse collapseOnSelect>\n\t\t            <Navbar.Header>\n\t\t                <h1 className=\"cabName\" style={{color: \"white\", fontSize: \"4vh\", float: \"left\", marginLeft:\"-100px\"}}><strong>ICO PLATAFORM by svu</strong></h1>\n\t\t            </Navbar.Header>\n\t\t        </Navbar>\n\n\t\t        <Col md={5} style={{borderRight: \"solid\"}}>\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t<Formu formCliked={this.formCliked}/>\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t</Col>\n\n\t\t\t\t<Col md={7} >\n\t\t\t\t\t\t<IcoList ICOarray={this.state.id_Array}  instancia={this.state.contrato} arrayERC20={arrayERC20} getERC20contract={this.executeTransfer}/>\n\t\t\t\t\t</Col>\n\n\t\t\t</div>\n\t\t);\n\n\t}\n}\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AAEA;;;;;;;;;;;;;;;;;;AAKA;AAEA;AACA;;AAEA;AACA;;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;AAIA;;;;;;;;;AAGA;;;;;;AAEA;AAGA;AACA;;AAAA;AACA;;AADA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;AAGA;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;;;;;;;;AAGA;;;;;;AACA;AACA;AAEA;AAEA;AAIA;AACA;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AANA;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;;AAAA;AACA;;;AADA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;AAIA;AACA;;AACA;AACA;;AADA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;AAIA;;;;;;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;;;;;;;;AAlQA;AACA;AADA;;;;;;;;;;;;AAbA;AASA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}