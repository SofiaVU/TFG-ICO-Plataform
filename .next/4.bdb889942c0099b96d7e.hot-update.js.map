{"version":3,"file":"4.bdb889942c0099b96d7e.hot-update.js","sources":["webpack:///components/InfoDetail.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { default as contract } from 'truffle-contract';\n\nimport {Row, Col,Button,form, label, FieldGroup,FormGroup,ControlLabel, FormControl} from 'react-bootstrap';\nimport contractERC20 from '../build/contracts/createERC20_v2.json'\n\nimport BalancesList from '../components/BalancesList'\n\n\n\nexport default class IfoDetail extends React.Component {\n\n\tconstructor(props){\n        super(props);\n        this.state =({ \n        \tinstance: null, \n            nameICO: null,\n            tokenAddr: null,\n            tokenName: null,\n            tokenSymbol: null,\n            tokenDecimals: null,\n            openingDate: null,\n            closingDate: null,\n            price: null,\n            token: null,\n            totalSupply: null,\n            actualSupply: null, \n            arrayEvents: null,\n        });\n        this.getInfoFromICOBB = this.getInfoFromICOBB.bind(this);\n        this.getInfoFromERC20 = this.getInfoFromERC20.bind(this);\n        this.getAllPastEvents = this.getAllPastEvents.bind(this);\n    }\n\n    async componentWillMount() {\n    \tvar theERC20 = contract(contractERC20);\n        theERC20.setProvider(web3.currentProvider);\n\n        var tokenAdd = await this.props.contrato.getTokenAddressByID.call(this.props.IcoID);\n\n        var instancia = theERC20.at(tokenAdd);\n\n        var miArray = new Array();\n\n        this.setState({\n        \tinstance: instancia,\n        });\n\n        var miArray = new Array();\n\n        var events = await instancia.allEvents({fromBlock:0, toBlock: \"latest\"});\n    \tevents.get((err, logs)=>{    \t\t\n    \t\tfor (var i=0; i < logs.length; i++){\n    \t\t\t\n    \t\t\tvar miEvent = new Object();\n    \t\t\tmiEvent.from = logs[i].args.from;\n    \t\t\tmiEvent.to = logs[i].args.to;\n    \t\t\tmiEvent.value = logs[i].args.value.toNumber();\n    \t\t\tmiEvent.aSupply = logs[i].args.aSupply.toNumber();\n\n    \t\t\t//console.log(miEvent.from); console.log(miEvent.to); console.log(miEvent.value);\n    \t\t\tmiArray.push(miEvent);\n    \t\t}\n    \t});\n    \tconsole.log(miArray);\n    \tthis.setState({\n    \t\tarrayEvents: miArray,\n    \t\tinstance: instancia,\n    \t});\n    }\n\n    async getInfoFromICOBB() {\n    \tvar contrato = this.props.contrato;\n    \tvar icoName =  await contrato.getICOnameByID(this.props.IcoID);\n    \tvar oDate = await contrato.getOpeningDateNameByID.call(this.props.IcoID);\n    \tvar cDate = await contrato.getClosingDateNameByID.call(this.props.IcoID);\n    \tthis.setState({\n    \t\tnameICO: icoName,\n    \t\topeningDate: oDate,\n    \t\tclosingDate: cDate,\n    \t});\n\n    \tvar tokenAdd = await contrato.getTokenAddressByID.call(this.props.IcoID);\n    \tthis.getInfoFromERC20(tokenAdd);\n    }\n\n    async getInfoFromERC20(addr) {\n    \t/*var theERC20 = contract(contractERC20);\n        theERC20.setProvider(web3.currentProvider);\n\n        var instance = theERC20.at(addr);*/\n        var tokName = await this.state.instance.tokenName();\n        var symbol = await this.state.instance.symbol();\n        var decimals = await this.state.instance.decimals();\n        var dec = decimals.toNumber();\n        var tokPrice = await this.state.instance.buyPrice();\n        var tprice = tokPrice.toNumber();\n        var supp = await this.state.instance.totalSupply();\n        var totSupply = supp.toNumber();\n        var aSupp = await this.state.instance.actualSupply();\n        var actSupply = aSupp.toNumber();\n\n    \tthis.setState({\n    \t\ttokenAddr: addr,\n            tokenName: tokName,\n            tokenSymbol: symbol,\n            price: tprice,\n            totalSupply: totSupply,\n            actualSupply: actSupply,\n            tokenDecimals: dec, \n        });\n\n    }\n\n    async getAllPastEvents(){\n    \tconsole.log(\"MIIIERDA\");\n    \tvar miArray = new Array();\n    \tvar instancia;\n\n    \twhile (this.state.instance == null){}\n\n        var events = await this.state.instance.allEvents({fromBlock:0, toBlock: \"latest\"});\n    \tevents.get((err, logs)=>{\n    \t\tfor (var i=0; i < logs.length; i++){\n    \t\t\t\n    \t\t\tvar miEvent = new Object();\n    \t\t\tmiEvent.from = logs[i].args.from;\n    \t\t\tmiEvent.to = logs[i].args.to;\n    \t\t\tmiEvent.value = logs[i].args.value.toNumber();\n    \t\t\tmiEvent.aSupply = logs[i].args.aSupply.toNumber();\n\n    \t\t\t//console.log(miEvent.from); console.log(miEvent.to); console.log(miEvent.value);\n    \t\t\tmiArray.push(miEvent);\n    \t\t}\n    \t});\n    \tconsole.log(miArray);\n    \tthis.setState({arrayEvents: miArray});    \t\n    }\n\n\trender(){\n\t\tthis.getInfoFromICOBB();\n\t\t//this.getAllPastEvents();\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Row className=\"show-grid\">\n\t\t\t\t\t<Col xs={12} md={6}>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<h1><strong>ICO NAME {this.state.nameICO}</strong></h1>\t\t\t\t\n\t\t\t\t\t\t\t\t<h3><strong>Token name:</strong> {this.state.tokenName} </h3>\n\t\t\t\t\t\t\t\t<h3><strong>Token symbol:</strong> {this.state.tokenSymbol} </h3>\n\t\t\t\t\t\t\t\t<h3><strong>ICO Opening Date:</strong> {this.state.openingDate} </h3>\n\t\t\t\t\t\t\t\t<h3><strong>ICO Closing Date:</strong> {this.state.closingDate} </h3>\n\t\t\t\t\t\t\t\t<h3><strong>{this.state.tokenName} Price:</strong>  {this.state.price} ether's </h3>\n\t\t\t\t\t\t\t\t<h3><strong>Total Supply of {this.state.tokenName} in contract:</strong> {this.state.totalSupply}</h3>\n\t\t\t\t\t\t\t\t<h3><strong>Actual Supply of {this.state.tokenName} in contract:</strong> {this.state.actualSupply}</h3>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col xs={12} md={6}>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t<h1><strong>INFO TO ADD TOKEN TO METAMASK</strong></h1>\n\t\t\t\t\t\t\t\t<h3><strong>Token Smart Contract Addres:</strong></h3><h4> {this.state.tokenAddr}</h4>\n\t\t\t\t\t\t\t\t<h3><strong>Token symbol:</strong> {this.state.tokenSymbol}</h3>\n\t\t\t\t\t\t\t\t<h3><strong>Token Decimals Of precision:</strong> {this.state.tokenDecimals}</h3> \n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<h1>TOKEN BALANCES</h1>\n\t\t\t\t\t<BalancesList arrayEvents={this.state.arrayEvents} />\n \t\t\t\t</Row>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\n\n// WEBPACK FOOTER //\n// components/InfoDetail.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAnBA;AAoBA;AACA;;;;;;;;;;;;AAEA;AACA;;AAEA;AACA;;AADA;AAEA;AAEA;AAEA;AACA;AADA;AAIA;;AAEA;AAAA;AAAA;AAAA;AACA;;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AAHA;;AAMA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AAKA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;;AACA;AACA;;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AAEA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;AAvKA;AACA;AADA;;;;;;;;;;;;AAAA;;;;;;;;;A","sourceRoot":""}